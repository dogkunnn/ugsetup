import os
import json
import xml.etree.ElementTree as ET

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á User ID ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå XML
def extract_user_id(file_path):
    try:
        tree = ET.parse(file_path)
        root = tree.getroot()

        user_id = None  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô None

        for entry in root.findall('.//boolean'):
            name = entry.get('name')
            print(f"  üîç Checking entry: {name}")  # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏û‡∏ö

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á 2 ‡∏Å‡∏£‡∏ì‡∏µ ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
            if 'experiencePlaytimeReported_' in name or 'firstPlayReported_' in name:
                extracted_id = name.split('_')[-1]
                if user_id is None:  # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ user_id ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ
                    user_id = int(extracted_id)

        return user_id
    except Exception as e:
        print(f"  ‚ùå Error parsing file {file_path}: {e}")
    return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á Username ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå prefs.xml
def extract_username(file_path):
    try:
        tree = ET.parse(file_path)
        root = tree.getroot()

        for entry in root.findall('.//string'):
            name = entry.get('name')
            if name == 'username':
                username = entry.text
                return username
    except Exception as e:
        print(f"  ‚ùå Error parsing file {file_path}: {e}")
    return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à
def get_user_data_from_apps(base_path):
    user_data = {}

    packages = [
        "com.one.one",
        "com.two.two",
        "com.three.three",
        "com.four.four",
        "com.five.five"
    ]  # ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

    print("\nüöÄ **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...**\n")

    for package in packages:
        print(f"üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à: {package}")

        prefs_file_path = os.path.join(base_path, package, 'shared_prefs', 'prefs.xml')
        apps_flyer_file_path = os.path.join(base_path, package, 'shared_prefs', 'APPS_FLYER_SHARED_PREFS.xml')

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not os.path.exists(apps_flyer_file_path) or not os.path.exists(prefs_file_path):
            print(f"  ‚ö†Ô∏è Warning: {package} ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå (prefs.xml ‡∏´‡∏£‡∏∑‡∏≠ APPS_FLYER_SHARED_PREFS.xml) üö´\n")
            continue

        # ‡∏î‡∏∂‡∏á User ID
        user_id = extract_user_id(apps_flyer_file_path)

        # ‡∏î‡∏∂‡∏á Username
        username = extract_username(prefs_file_path)

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Dictionary
        if user_id and username:
            print(f"  ‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: Username = {username}, UserId = {user_id}\n")
            user_data[package] = {'Username': username, 'UserId': user_id, 'server_link': 'roblox://

placeid=2753915549'}
        else:
            print(f"  ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÉ‡∏ô {package}\n")

    print("\n‚úÖ **‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!**\n")
    return user_data

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON
def save_to_json(user_data, filename):
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            existing_data = json.load(f)
    else:
        existing_data = {}

    existing_data.update(user_data)  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà

    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(existing_data, f, ensure_ascii=False, indent=4)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á SharedPreferences
base_path = '/data/data/'

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à
user_data = get_user_data_from_apps(base_path)

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö
if user_data:
    filename = "/storage/emulated/0/Download/user_data.json"
    save_to_json(user_data, filename)
    print(f"\nüíæ **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: {filename}**")
else:
    print("\n‚ùå **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ**")
                
